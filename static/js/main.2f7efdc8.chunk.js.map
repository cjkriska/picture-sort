{"version":3,"sources":["components/Header.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["Header","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","App","refImg","c","ctx","mappedArray","stopSort","arrayToData","rows","imgData","createImageData","width","height","m","i","length","j","data","a","sleep","ms","Promise","resolve","setTimeout","renderCanvas","map","num","putImageData","temp","n","min","key","mergeSort3","array","l","r","Math","floor","sqrt","merge3","left","mid","right","result","push","concat","slice","useEffect","document","getElementById","addEventListener","e","target","files","imageFile","reader","FileReader","readAsDataURL","onloadend","Image","src","onload","ev","getContext","ratio","drawImage","onClick","imgInput","style","display","id","placeholder","source","value","test","crossOrigin","accept","click","alt","randRows","pixel","row","dataToArray","getImageData","randInts","temporaryValue","randomIndex","currentIndex","random","randomArray","randImgData","console","log","querySelector","alert","clearRect","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2f7efdc8.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n      <nav className=\"navbar navbar-expand-lg navbar-dark navbar-custom\">\r\n        <a className=\"navbar-brand\" href=\"#\">Picture Sort</a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n      </nav>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\nimport { useEffect } from \"react\";\nimport Header from \"./Header\";\n\nfunction App() {\n\n  // Global\n  let refImg;\n  let c;\n  let ctx;\n  let mappedArray = [];\n  let stopSort = false;\n\n\n\n\n\n  // Paints Canvas with Milo\n  function paintMilo() {\n    refImg = document.getElementById(\"milo-image\");\n    c = document.getElementById(\"myCanvas\");\n    ctx = c.getContext(\"2d\");\n    \n    let ratio = Math.min(1000/refImg.width, 400/refImg.height);\n  \n    refImg.width = refImg.width*ratio;\n    refImg.height = refImg.height*ratio;\n\n    c.width = refImg.width;\n    c.height = refImg.height;\n    ctx.drawImage(refImg, 0, 0, c.width, c.height);\n\n  }\n\n  // Paint your own Image - URL\n  function paintCustom() {\n    let source = document.getElementById(\"urlInput\").value;\n    c = document.getElementById(\"myCanvas\");\n    ctx = c.getContext(\"2d\");\n    refImg = new Image();\n    if (/^([\\w]+\\:)?\\/\\//.test(source)) {\n      refImg.crossOrigin = \"anonymous\";\n    }\n    refImg.src = source;\n    refImg.onload = function() {\n      // Resizes image to smaller, keeps aspect ratio\n      let ratio = Math.min(1000/refImg.width, 400/refImg.height);\n      refImg.width = refImg.width*ratio;\n      refImg.height = refImg.height*ratio;\n\n      c.width = refImg.width;\n      c.height = refImg.height;\n      ctx.drawImage(refImg, 0, 0, c.width, c.height);\n    }\n  }\n  // Image URL Button Click\n  function clickImageURL() {\n    let imgInput = document.getElementById(\"inp\");\n    if(imgInput.style.display === \"inline\") {\n      imgInput.style.display = \"none\";\n    } else {\n      imgInput.style.display = \"inline\";\n    }\n\n  }\n\n  // Paint your own Image - Upload\n  useEffect(() => {\n\n    let imgInput = document.getElementById(\"uploadInput\");\n    imgInput.addEventListener(\"change\", function(e) {\n      if(e.target.files) {\n        let imageFile = e.target.files[0];\n        var reader = new FileReader();\n        reader.readAsDataURL(imageFile);\n        reader.onloadend = function(e) {\n          refImg = new Image();\n          refImg.src = e.target.result;\n          refImg.onload = function(ev) {\n            c = document.getElementById(\"myCanvas\");\n            ctx = c.getContext(\"2d\");\n\n            let ratio = Math.min(1000/refImg.width, 400/refImg.height);\n            refImg.width = refImg.width*ratio;\n            refImg.height = refImg.height*ratio;\n            c.width = refImg.width;\n            c.height = refImg.height;\n\n            ctx.drawImage(refImg, 0, 0, c.width, c.height);\n          }\n        }\n      }\n    });\n\n  });\n  // Upload Button Click\n  function clickFileUpload() {\n    document.getElementById(\"uploadInput\").click();\n  }\n\n\n  // Converts imageData array to multidimensional array\n  function dataToArray(imgData) {\n    let array = [];\n    for (let i = 0; i < imgData.length; i += 4) {\n      let pixel = [];\n      pixel.push(imgData[i]);\n      pixel.push(imgData[i + 1]);\n      pixel.push(imgData[i + 2]);\n      pixel.push(imgData[i + 3]);\n      array.push(pixel);\n\n    }\n    let rows = [];\n    for (let i = 0; i < array.length; i += c.width) {\n      let row = [];\n      for (let j = 0; j < c.width; j++) {\n        row.push(array[i + j]);\n      }\n      rows.push(row);\n    }\n\n    return rows;\n\n  }\n  // Converts multidimensional array to imageData array\n  function arrayToData(rows) {\n    let imgData = ctx.createImageData(c.width, c.height);\n    let m = 0;\n    // iterate through rows\n    for (let i = 0; i < rows.length; i++) {\n      // iterate through columns\n      for (let j = 0; j < rows[i].length; j++) {\n        imgData.data[m++] = rows[i][j][0];\n        imgData.data[m++] = rows[i][j][1];\n        imgData.data[m++] = rows[i][j][2];\n        imgData.data[m++] = rows[i][j][3];\n      }\n    }\n    return imgData;\n\n  }\n\n  // Randomizes Canvas\n  function randomize() {\n    let randRows = [];\n    if(ctx) {\n      let rows = dataToArray(ctx.getImageData(0, 0, c.width, c.height).data);\n      let randInts = randomArray(rows.length);\n      for (let i = 0; i < rows.length; i++) {\n        randRows.push(rows[randInts[i]]);\n      }\n      let randImgData = arrayToData(randRows);\n\n      ctx.putImageData(randImgData, 0, 0);\n\n      // Maps random rows to integers to be sorted\n      let j = 0;\n      mappedArray = [];\n      randInts.map(function (num) {\n        mappedArray.push([num, randRows[j]]);\n        j++;\n      });\n\n      console.log(mappedArray);\n\n      document.querySelector(\".sorts\").style.display = \"inline\";\n\n    } else {\n      alert(\"Oops! Please upload image to sort!\");\n    }\n\n  }\n\n  // Clears Canvas\n  function clearCanvas() {\n    if(ctx) {\n      ctx.clearRect(0, 0, c.width, c.height);\n      ctx = null;\n    }\n    mappedArray = [];\n    document.querySelector(\".sorts\").style.display = \"none\";\n  }\n\n  // Stops Sorting\n  async function stopSorting() {\n    stopSort = true;\n    await sleep(100);\n    stopSort = false;\n  }\n  \n  // Creates a random array of integers 0 through specified number\n  function randomArray(num) {\n    let array = [];\n    for (let i = 0; i < num; i++) {\n      array.push(i);\n    }\n    let currentIndex = num;\n    let temporaryValue, randomIndex;\n  \n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  }\n\n  // Sleep\n  function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  \n  // Renders canvas with current mapped array\n  function renderCanvas() {\n    const sortedRows = mappedArray.map(function (num) {\n      return num[1];\n    });\n    const imgData = arrayToData(sortedRows);\n    ctx.putImageData(imgData, 0, 0);\n  }\n\n  // Debugging function\n  function logCurrentMappedArray() {\n    console.log(mappedArray);\n  }\n\n\n\n  // -----------------------------------------------------------------------------\n  // ------------------ Sorting --------------------------------------------------\n  // -----------------------------------------------------------------------------\n\n  // Bubble Sort\n  async function bubbleSort() {\n    let m = 0;\n    for (let i = 0; i < mappedArray.length; i++) {\n      for (let j = 0; j < mappedArray.length - 1; j++) {\n        if (mappedArray[j][0] > mappedArray[j + 1][0]) {\n          let temp = mappedArray[j];\n          mappedArray[j] = mappedArray[j + 1];\n          mappedArray[j + 1] = temp;\n        }\n        \n        if(j%10 === 0) {\n          await sleep(1);\n          renderCanvas();\n        }\n        if(stopSort) {\n          return;\n        }\n      }\n    }\n\n  }\n\n  // Selection Sort\n  async function selectionSort() { \n    let n = mappedArray.length;\n    for(let i=0; i < n; i++) {\n        let min = i;\n        for(let j=i; j < n; j++){\n            if(mappedArray[j][0] < mappedArray[min][0]) {\n                min = j; \n            }\n\n            if(stopSort) {\n              return;\n            }\n\n         }\n         if (min != i) {\n             let temp = mappedArray[i]; \n             mappedArray[i] = mappedArray[min];\n             mappedArray[min] = temp;\n             await sleep(100);\n             renderCanvas();\n        }\n    }\n}\n\n  // Insertion Sort\n  async function insertionSort() {\n    for (let i = 1; i < mappedArray.length; i++) {\n      let key = mappedArray[i];\n      let j = i - 1;\n      while (j >= 0 && mappedArray[j][0] > key[0]) {\n        mappedArray[j + 1] = mappedArray[j];\n        j = j - 1;\n\n\n        if(stopSort) {\n          return;\n        }\n\n      }\n      mappedArray[j + 1] = key;\n      await sleep(1);\n      renderCanvas();\n    }\n  }\n\n\n\n\n\n\n  // Merge Sort - 1\n  // Idea: Find a way to remember where each sliced array starts in the entire mappedArray\n  // so you can continuously change mappedArray values and render them\n  function mergeSort(array) {\n    if(array.length <= 1) {\n      return array;\n    }\n\n    const mid = Math.floor(array.length / 2);\n    const left = array.slice(0, mid);\n    const right = array.slice(mid);\n\n    return merge(mergeSort(left), mergeSort(right));\n  }\n  // Idea: Merge needs a way to know where it is in mappedArray\n  function merge(left, right) {\n\n    let resultArray = [];\n    let leftIndex = 0;\n    let rightIndex = 0;\n\n    while(leftIndex < left.length && rightIndex < right.length) {\n      if(left[leftIndex][0] < right[rightIndex][0]) {\n        resultArray.push(left[leftIndex]);\n        leftIndex++;\n      } else {\n        resultArray.push(right[rightIndex]);\n        rightIndex++;\n      }\n      \n    }\n    \n    resultArray = resultArray.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));\n    return resultArray;\n  }\n\n\n\n\n  // MERGE SORT - 2\n  async function mergeSort2(array, l, r) {\n      if(l < r) {\n        let m = l + Math.floor((r-l) / 2);\n        mergeSort2(array, l, m);\n        mergeSort2(array, m+1, r);\n        await sleep(1000*Math.sqrt(r-l));\n        renderCanvas();\n        merge2(array, l, m, r);\n      }\n    }\n    function merge2(array, start, mid, end) {\n      let start2 = mid + 1;\n      if(array[mid][0] <= array[start2][0]) {\n        return;\n      }\n  \n      while(start <= mid && start2 <= end) {\n        if(array[start][0] <= array[start2][0]) {\n          start++;\n        } else {\n          let value = array[start2];\n          let index = start2;\n          while(index != start) {\n            array[index] = array[index-1];\n            index--;\n            \n          }\n          array[start] = value;\n  \n          start++;\n          mid++;\n          start2++;\n        }\n      }\n  \n    }\n\n\n\n  // Merge Sort - 3\n  async function mergeSort3(array, l, r) {\n    let length = r - l;\n    if(length < 2) {\n      return array;\n    }\n    let m = l + Math.floor(length / 2);\n    mergeSort3(array, l, m);\n    mergeSort3(array, m, r);\n    await sleep(500*Math.sqrt(r-l));\n    renderCanvas();\n    merge3(array, l, m, r);\n\n  }\n  function merge3(array, left, mid, right) {\n    let result = [];\n    let l = left;\n    let r = mid;\n    while(l < mid && r < right) {\n      if(array[l][0] < array[r][0]) {\n        result.push(array[l++]);\n      } else {\n        result.push(array[r++]);\n      }\n    }\n    result = result.concat(array.slice(l, mid)).concat(array.slice(r, right));\n    for(let i=0; i < right-left; i++) {\n      array[left+i] = result[i];\n    }\n  }\n\n  \n\n  // Merge Sort Visual\n  async function mergeSortVisual() {\n    await mergeSort3(mappedArray, 0, mappedArray.length-1);\n    await sleep(1000);\n    renderCanvas();\n  }\n\n\n  // -----------------------------------------------------------------------------\n  // -----------------------------------------------------------------------------\n\n\n\n  // Render Page\n  return (\n    <div className=\"App\">\n      <Header/>\n      <div className=\"main container\">\n        <div className=\"row\">\n\n          <div className=\"upload-pic-section col-2 vh-100\">\n            <button onClick={clickImageURL} className=\"btn btn-dark\" type=\"button\">Image URL</button>\n            <div id=\"inp\">\n              <input id=\"urlInput\" type=\"text\" placeholder=\"Enter URL\" className=\"form-control\" />\n              <button onClick={paintCustom} className=\"btn btn-outline-light\" id=\"submitURL\">Go</button>\n            </div>\n            <input id=\"uploadInput\" type=\"file\" accept=\"image/*\" className=\"form-control\"/>\n            <button onClick={clickFileUpload} className=\"btn btn-dark\">Upload Image</button>\n            <button onClick={paintMilo} className=\"btn btn-dark\">Milo</button>\n            <img id=\"milo-image\" src=\"milo3.jpg\" alt=\"\"/>\n          </div>\n\n          <div className=\"sorting-section col-10\">\n            <button onClick={randomize} className=\"btn btn-dark\">Randomize</button>\n            <div className=\"sorts\">\n              <button onClick={insertionSort} className=\"btn btn-dark\">Insertion Sort</button>\n              <button onClick={bubbleSort} className=\"btn btn-dark\">Bubble Sort</button>\n              <button onClick={selectionSort} className=\"btn btn-dark\">Selection Sort</button>\n              <button onClick={mergeSortVisual} className=\"btn btn-dark\">Merge Sort</button>\n              <button onClick={stopSorting} className=\"btn btn-outline-dark\">Stop Sorting</button>\n            </div>\n            <button onClick={clearCanvas} className=\"btn btn-outline-dark\">Clear</button>\n\n            {/* Debugging */}\n            {/* <button onClick={logCurrentMappedArray} className=\"btn btn-light\">Log Current Mapped Array</button> */}\n            \n            <canvas id=\"myCanvas\" />\n          </div>\n\n        </div>\n\n\n\n\n\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}